" plugins
"
filetype off
call pathogen#runtime_append_all_bundles()
filetype plugin indent on
set nocompatible
set modelines=0

colorscheme zenburn

" tabs
"
set tabstop=2     " Use 2 spaces for tabs
set smarttab      " Automatic indenting
set shiftwidth=2  " sets spaces used for indention
set autoindent    " continue indention from previous line
set expandtab     " tab key inserts spaces instead of tabs
set backspace=2   " start,indent

" general
"
set encoding=utf-8
set scrolloff=3      " number of lines below/above cursor when scrolling
set showmode
set showcmd
set hidden           " keep changes in buffers
set wildmenu
set wildmode=list:longest
set visualbell       " disable beeping
set cursorline       " highlight current line
set ttyfast          " better redrawing
set ruler            " constant ruler at bottom of screen
set backspace=indent,eol,start
set laststatus=2     " statusline at bottom
set relativenumber   " relative line-numbering
set undofile
set wrap
set list             " show invisibles

" set textwidth=79
" set formatoptions=qrn1
" set colorcolumn=85


syntax on

let mapleader = ","

" default regex
"
nnoremap / /\v
vnoremap / /\v

" search defaults
"
set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch

" /g default, f.ex. :s/a/b/ instead of :s/a/b/g
"
set gdefault

nnoremap <leader><space> :noh<cr> " remove search results highlight
nnoremap <tab> %                  " jump to next bracket with tab
vnoremap <tab> %

" type ; instead of :
nnoremap ; :

" strip all trailing whitespace in current file
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" fold tag (html)
nnoremap <leader>ft Vatzf

" reselect text just pasted
nnoremap <leader>r V`]





" Syntastic - Syntax checker
"
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_enable_signs = 1
let g:syntastic_auto_jump=1
 

" Do not use swapfiles or backup since writebackup is used
" writebackup is still used, so a copy is always kept in memory
set nobackup    " Do not write backup files to disk
set noswapfile  " Do not use swapfiles (they have trouble with large files)

set wildignore+=*.png,*.jpg,*.gif,*.ai,*.jpeg,*.psd,*.swp,*.jar,*.zip,*.gem,.DS_Store,log/**,tmp/**,coverage/**,rdoc/**

" additional support for some file types
autocmd BufRead *.html.erb set ft=eruby.html
autocmd BufRead,BufNewFile jquery.*.js set ft=javascript syntax=jquery

set whichwrap+=<,>,h,l " allow backspace and cursor keys to cross line boundaries

" A vim function that keeps your state
" http://technotales.wordpress.com/2010/03/31/preserve
function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" map control left and control right to swap the buffer
map <C-right> <ESC>:bn<CR>
map <C-left> <ESC>:bp<CR>

" map control up and down to navigate between tabs
map <C-up> :tabprevious<CR>
map <C-down> :tabnext<CR>

" above for macvim, however with SHIFT-CMD
map <S-D-right> <ESC>:bn<CR>
map <S-D-left> <ESC>:bp<CR>
map <S-D-up> :tabprevious<CR>
map <S-D-down> :tabnext<CR>

" also map 1 - 10 to tabs:
for i in range(1, 9) 
  exec "nnoremap <D-".i."> ".i."gt" 
endfor 

" map Command-j to Scroll Down
map <D-j> <C-d>
" map Command-k to Scroll Up
map <D-k> <C-u>

" map Shift-U to REDO
map <S-u> <C-r>

" map F5 to FuzzyFile
map <F5> :FufFile<CR>

" map F4 to NERDTree
map <F4> :NERDTree<CR>

" map F6 to FuzzyFinder
nmap <F6> :FufFile **/<CR>

" more shortcuts for FuzzyFinder

nmap ,f :FufFileWithCurrentBufferDir<CR>
nmap ,b :FufBuffer<CR>
nmap ,t :FufTaggedFile<CR>


" Leader-v reloads the vimrc -- making all changes active (have to save first)
map <silent> ,v :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>:NERDTreeClose<CR>

" NERDTree (Command-d / Leader-d)
map <leader>d :NERDTreeToggle<CR>
map <D-d> :NERDTreeToggle<CR>
map <leader>n :NERDTree<CR>
" map <D-d> :execute 'NERDTreeToggle ' . getcwd()<CR>
" navigates nerdtree to the current file
map <leader><S-d> :NERDTree %:p:h<CR> 

" NERD Commenter Sucks balls. Use tComment instead!
" nmap <D-1> gc
" vmap <D-1> gcgv

" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬

" Shift-w maps to Control-W
map <S-w> <C-w>

" ,w will easily switch window focus
map <leader>w <C-w>w

" Setup Command-e to use ctags (Control-])
map <D-e> <C-]>

" Replicate textmate CMD-[ and CMD-] for indentation
nmap <D-[> <<
nmap <D-]> >>
vmap <D-[> <gv
vmap <D-]> >gv

" Easy edit helpers
" http://vimcasts.org/episodes/the-edit-command/
map <leader>ew :e <C-R>=expand("%:p:h") . "/" <CR>
map <leader>es :sp <C-R>=expand("%:p:h") . "/" <CR>
map <leader>ev :vsp <C-R>=expand("%:p:h") . "/" <CR>
map <leader>et :tabe <C-R>=expand("%:p:h") . "/" <CR>
map <leader>tn :tabnew<CR>

" Retab the document (tabs to spaces)
nmap <silent> <leader><S-t> :retab!<CR>

" Rotate themes -> found this here: http://stackoverflow.com/questions/164847/what-is-in-your-vimrc
let themeindex=0
function! RotateColorTheme()
   let y = -1
   while y == -1
      let colorstring = "skittles#deveiate#default#solarized#zenburn#inkpot#wombat#"
      let x = match( colorstring, "#", g:themeindex )
      let y = match( colorstring, "#", x + 1 )
      let g:themeindex = x + 1
      if y == -1
         let g:themeindex = 0
      else
         let themestring = strpart(colorstring, x + 1, y - x - 1)
         return ":colorscheme ".themestring
      endif
   endwhile
endfunction

" Rotate Color Scheme ,ee
nnoremap <silent> <Leader>ee :execute RotateColorTheme()<CR>

" Edit vimrc ,ev
nnoremap <silent> <Leader>ev :tabnew<CR>:e ~/.vimrc<CR>

" Edit gvimrc ,gv
nnoremap <silent> <Leader>gv :tabnew<CR>:e ~/.gvimrc<CR>

" Create Blank Newlines and stay in Normal mode
nnoremap <silent> zj o<Esc>
nnoremap <silent> zk O<Esc>

" Space will toggle folds!
nnoremap <space> za
